{"version":3,"sources":["tokens/color.js","tokens/fonts.js","pages/home/style.js","components/container/style.js","components/container/index.js","pages/home/index.js","components/search/style.js","components/card/style.js","components/card/index.js","components/card-lists/index.js","components/search/index.js","pages/entities/index.js","components/navbar/style.js","components/navbar/index.js","components/footer/style.js","components/footer/index.js","components/layout/index.js","App.js","serviceWorker.js","index.js"],"names":["colors","fontSizes","fontWeights","StyleHeading","styled","h2","StylePara","p","HeroWrapper","div","StyledContainer","Container","children","Home","Fragment","StyledInput","input","StyledFormWrapper","StyledCardWrapper","StyledHTMLCode","Card","entity","dangerouslySetInnerHTML","__html","htmlcode","name","csscode","CardLists","entities","map","key","Search","useState","inputValue","setInputValue","searchedValue","setSearchedValue","searchByName","filter","res","slice","length","onSubmit","e","preventDefault","type","placeholder","onChange","target","value","Entities","StyledNavFluidWrapper","StyledNavWrapper","StyledNavLogoWrapper","StyledNavLogo","span","StyledLink","Link","StyledNavLinksWrapper","StyledNavLink","Navbar","to","href","FooterWrapper","FooterTitle","Footer","Layout","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a514b306.chunk.js","sourcesContent":["export const colors = {\n    primary: '#5A10C8',\n    secondary: '#BA92F6',\n    tertiary: '#0096C7',\n    dark: '#390A7F',\n    light: '#F5EFFE',\n    black: '#080112',\n    white: '#ffffff'\n}","export const fontSizes = {\n    \"0\": '4px',\n    \"1\": '8px',\n    \"2\": '12px',\n    \"3\": '16px',\n    \"4\": '20px',\n    \"5\": '24px',\n    \"6\": '32px',\n    \"7\": '40px',\n    \"8\": '48px',\n    \"9\": '56px',\n    \"10\": '72px'\n}\n\nexport const fontWeights = {\n    light: '300',\n    normal: '400',\n    semibold: '600',\n    bold: '800'\n}","import styled from 'styled-components';\nimport { colors, fontSizes } from \"../../tokens\";\n\nexport const StyleHeading = styled.h2`\n    font-size: ${fontSizes[\"9\"]};\n    color: ${ colors.primary};\n    max-width: 600px;\n`\nexport const StylePara = styled.p`\n    font-size: ${fontSizes[\"3\"]};\n    color: ${ colors.dark};\n`\n\nexport const HeroWrapper = styled.div`\n    padding: 100px 0px;\n    background: ${colors.light};\n`","import styled from \"styled-components\";\n\nexport const StyledContainer = styled.div`\n    max-width: 1200px;\n    margin: auto;\n`","import React from \"react\";\nimport { StyledContainer } from \"./style\"\nexport const Container = ({ children }) => {\n    return (\n        <StyledContainer>\n            {children}\n        </StyledContainer>\n    )\n}","import React from \"react\";\nimport { StyleHeading, HeroWrapper, StylePara } from \"./style\";\nimport { Container } from \"../../components/container\";\nexport const Home = () => {\n    return (\n        <React.Fragment>\n            <HeroWrapper>\n                <Container>\n                    <StyleHeading>Welcome to Character Entities site</StyleHeading>\n                    <StylePara>Here you can find out all Web character entities properties</StylePara>\n                </Container>\n            </HeroWrapper>\n        </React.Fragment>\n    )\n}\n\n","import styled from \"styled-components\";\nimport { colors } from \"../../tokens\"\nexport const StyledInput = styled.input`\n    height: 35px;\n    border-radius: 8px;\n    max-width: 900px;\n    width:  100%;\n    margin: auto;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding: 10px 0px;\n    border: 1px solid ${colors.primary};\n    :focus {\n      border: 1px solid ${colors.primary};\n      outline: none;\n    }\n    :active {\n      border: 1px solid ${colors.primary};\n      outline: none;\n    }\n`;\n\nexport const StyledFormWrapper = styled.div`\n    padding: 30px 0px;\n`","import styled from \"styled-components\";\nimport { colors } from \"../../tokens\"\n\nexport const StyledCardWrapper = styled.div`\n    padding: 30px 20px;\n    background-color: ${colors.primary};\n    color: ${colors.white};\n    max-width: 900px;\n    margin: 30px auto;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    border-radius: 10px;\n    cursor: pointer;\n    transition: all 0.55s ease-in-out;\n    :hover {\n        background-color: ${colors.secondary};\n        color: ${colors.black};\n        transition: all 0.35s ease-in-out;\n    }\n`\n\nexport const StyledHTMLCode = styled.div`\n    font-size: 32px;\n`","import React from \"react\";\nimport { StyledCardWrapper, StyledHTMLCode } from \"./style\";\nexport const Card = ({ entity }) => {\n    return (\n        <StyledCardWrapper>\n            <StyledHTMLCode dangerouslySetInnerHTML={{ __html: `${entity.htmlcode}` }}></StyledHTMLCode>\n            <div>{entity.name}</div>\n            <div>{entity.csscode}</div>\n        </StyledCardWrapper>\n    )\n}","import React from \"react\"\nimport { Card } from \"../card\"\nimport * as entities from \"../../data/entities.json\"\nexport const CardLists = () => {\n    return (\n        <React.Fragment>\n            {entities.default.map(entity => {\n                return <Card key={entity.name} entity={entity} />\n            })}\n        </React.Fragment>\n    )\n}","import React, { useState } from \"react\";\nimport { StyledInput, StyledFormWrapper } from \"./style\";\nimport { Card } from \"../card\";\nimport { CardLists } from \"../../components/card-lists\";\nimport * as entities from \"../../data/entities.json\";\nexport const Search = () => {\n\n    const [inputValue, setInputValue] = useState('');\n    const [searchedValue, setSearchedValue] = useState(null);\n\n    const handleOnChange = (e) => {\n        setInputValue(e.target.value);\n        setSearchedValue(searchByName(inputValue));\n    }\n\n    const handleOnSubmit = (e) => {\n        e.preventDefault();\n        setInputValue('');\n        setSearchedValue(null);\n\n    }\n\n    const searchByName = (name) => {\n        return entities.default.filter(res => res.name.slice(0, name.length) === name);\n    }\n    return (\n        <React.Fragment>\n            <StyledFormWrapper>\n                <form onSubmit={handleOnSubmit}>\n                    <StyledInput type=\"text\" placeholder=\"Type something...\" onChange={handleOnChange} value={inputValue} />\n                </form>\n                {\n                    searchedValue && searchedValue.map(entity => {\n                        return <Card key={entity.name} entity={entity} />\n                    })\n                }\n                {\n                    !searchedValue && <CardLists />\n                }\n            </StyledFormWrapper>\n        </React.Fragment>\n    )\n}","import React from \"react\";\nimport { Search } from \"../../components/search\";\nimport { Container } from \"../../components/container\";\nexport const Entities = () => {\n    return (\n        <React.Fragment>\n            <Container>\n                <Search />\n            </Container>\n        </React.Fragment>\n    )\n}","import styled from \"styled-components\";\nimport { fontSizes, fontWeights, colors } from \"../../tokens\";\nimport { Link } from \"react-router-dom\";\nexport const StyledNavFluidWrapper = styled.div`\n    background-color: ${colors.light};\n`;\n\nexport const StyledNavWrapper = styled.div`\n    max-height: 80px;\n    height: 80px;\n    max-width: 1200px;\n    margin: auto;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n`\n\nexport const StyledNavLogoWrapper = styled.div`\n    margin-top: auto;\n    margin-bottom: auto;\n`\n\nexport const StyledNavLogo = styled.span`\n    font-size: ${fontSizes[\"6\"]};\n    font-weight: ${fontWeights.semibold};\n    color: ${colors.dark};\n`\n\nexport const StyledLink = styled(Link)`\n    text-decoration: none;\n`\n\nexport const StyledNavLinksWrapper = styled.div`\n    margin-top: auto;\n    margin-bottom: auto;\n`\n\nexport const StyledNavLink = styled.span`\n    font-size: ${fontSizes[\"3\"]};\n    text-decoration: none;\n    margin: 0px 16px;\n`","import React from \"react\";\nimport {\n    StyledNavFluidWrapper,\n    StyledNavWrapper,\n    StyledNavLogoWrapper,\n    StyledNavLogo,\n    StyledNavLinksWrapper,\n    StyledNavLink,\n    StyledLink\n} from \"./style\";\nimport { Link } from \"react-router-dom\";\n\nimport { Container } from \"../container\"\nexport const Navbar = () => {\n    return (\n        <StyledNavFluidWrapper>\n            <Container>\n                <StyledNavWrapper>\n                    <StyledNavLogoWrapper>\n                        <Link to=\"/\">\n                            <StyledNavLogo>Character Entities</StyledNavLogo>\n                        </Link>\n                    </StyledNavLogoWrapper>\n                    <StyledNavLinksWrapper>\n                        <StyledLink to=\"/entities\">\n                            <StyledNavLink href=\"#\">Entities</StyledNavLink>\n                        </StyledLink>\n                    </StyledNavLinksWrapper>\n                </StyledNavWrapper>\n            </Container>\n        </StyledNavFluidWrapper>\n    )\n}","import styled from \"styled-components\";\nimport { colors, fontWeights } from \"../../tokens\"\nexport const FooterWrapper = styled.div`\n    height: 160px;\n    text-align: center;\n    margin: auto;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`\n\nexport const FooterTitle = styled.p`\n    font-size: 18px;\n    color: ${colors.black};\n    font-weight: ${fontWeights.semibold};\n`","import React from \"react\";\nimport { FooterWrapper, FooterTitle } from \"./style\"\nexport const Footer = () => {\n    return (\n        <FooterWrapper>\n            <FooterTitle>Made with :love: by @isamrish</FooterTitle>\n        </FooterWrapper>\n    )\n}","import React from \"react\";\nimport { Navbar } from \"../navbar\";\nimport { Footer } from \"../footer\";\nimport { Container } from \"../../components/container\"\nexport const Layout = ({ children }) => {\n    return (\n        <React.Fragment>\n            <Navbar />\n            {children}\n            <Container>\n                <Footer />\n            </Container>\n        </React.Fragment>\n    )\n}","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport { Home } from \"./pages/home\";\nimport { Entities } from \"./pages/entities\";\nimport { Layout } from \"./components/layout\"\n\nfunction App() {\n  return (\n    <Router>\n      <Layout>\n        <Switch>\n          <Route path=\"/entities\">\n            <Entities />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </Layout>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}